import jenkins.*
import jenkins.model.*
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.CredentialsScope
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl

// Match all _*_USER_ / _*_PASSWORD_ env keys to create associated credentials
// All underscores will be translated to dash

global_domain = Domain.global()
credentials_store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

def doOverride = System.getenv("_OVERRIDE_CREDENTIALS_WITH_ENV_") ?: "true"
doOverride = doOverride.toBoolean()
def credentialsList = []

credentials_store.getCredentials(global_domain).each {
    credentialsList.add(it.id)
}
for (env in System.getenv()) {
    def envstr = env.toString()
    def base = null
    def credsID = null
    def user = null
    def password = null
    // if match a user keyword
    if (envstr ==~ /^[^=]*_USER_=.*/) {
        envstr = envstr.replaceAll(/_USER_=.*/, "")
        envstr = envstr.replaceAll(/^_/, "")
        user = System.getenv("_" + envstr + "_USER_")
        // For security purpose, we may want not to store the password but input it manually
        password = System.getenv().get("_" + envstr + "_PASSWORD_") ?: ""
        base = envstr.replaceAll("_", "-").toLowerCase()
        credsID = base + "-credentials"
        if (! doOverride){
            if (credsID in credentialsList){
                println(credsID + " already in credentials list, skipping...")
                continue
            }
        }
        def creds = new UsernamePasswordCredentialsImpl(
            CredentialsScope.GLOBAL
            , credsID
            , "the ${base} credentials"
            , user
            , password)

        credentials_store.removeCredentials(global_domain, creds)
        credentials_store.addCredentials(global_domain, creds)
    }
}
