import jenkins.*
import jenkins.model.*
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.CredentialsScope
import org.jenkinsci.plugins.docker.commons.credentials.DockerServerCredentials
import groovy.io.FileType

def clientKey = new File("/etc/docker/key.pem")
if (!clientKey.exists()){
    return
}
global_domain = Domain.global()
credentials_store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

clientKey = clientKey.getText()
def clientCertificate = new File("/etc/docker/cert.pem").getText()
def serverCaCertificate = new File("/etc/docker/ca.pem").getText()

dockerCredentials = new DockerServerCredentials(
    CredentialsScope.GLOBAL,
    "docker-server-credentials",
    "The TLS docker server credentials",
    clientKey,
    clientCertificate,
    serverCaCertificate
)
credentials_store.removeCredentials(global_domain, dockerCredentials)
credentials_store.addCredentials(global_domain, dockerCredentials)

def trimQuotesAndSpaces(string) {
    def output = string.replaceFirst(/^["'\t ]*/, '')
    output = output.replaceFirst(/["'\t ]*$/, '')
    return output
}
def certsRootPath = "/etc/docker"
def baseDir = null
new File(certsRootPath).eachFile(FileType.DIRECTORIES) { certdir ->
    clientKey = new File("${certdir}/key.pem")
    clientCertificate = new File("${certdir}/cert.pem")
    serverCaCertificate = new File("${certdir}/ca.pem")
    if ( clientKey.exists() && clientCertificate.exists() && serverCaCertificate.exists()) {
        baseDir = certdir.getName().replaceAll(/.*\//, '')
        baseDir = baseDir.replaceAll(/[_ .]/, '-')
        dockerCredentials = new DockerServerCredentials(
            CredentialsScope.GLOBAL,
            "docker-${baseDir}-credentials",
            "The TLS docker ${baseDir} credentials",
            clientKey.getText(),
            clientCertificate.getText(),
            serverCaCertificate.getText()
        )
        credentials_store.removeCredentials(global_domain, dockerCredentials)
        credentials_store.addCredentials(global_domain, dockerCredentials)
    }
}
